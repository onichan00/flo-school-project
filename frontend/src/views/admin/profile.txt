<template>
  <div v-if="notFound" class="py-8 px-4 mx-auto max-w-screen-xl lg:py-16 lg:px-6">
    <div class="mx-auto max-w-screen-sm text-center">
      <h1 class="mb-4 text-7xl tracking-tight font-extrabold lg:text-9xl text-florijnOrange">404</h1>
      <p class="mb-4 text-3xl tracking-tight font-bold text-gray-900 md:text-4xl">This user is missing.</p>
      <p class="mb-4 text-lg font-light text-gray-500">Sorry, we can't find the user you were looking for. </p>
    </div>
  </div>
  <div class="w-full h-96" v-else-if="user === null && !notFound">
    <LoadSpinner/>
  </div>
  <div v-else class="p-4 mb-10">
    <div class="flex flex-col xl:flex-row gap-6">
      <div class="w-full xl:w-1/3 p-4 rounded-md shadow-md">
        <img :src="user.photo" class="max-w-full rounded-lg w-full profileImage" alt="User profile image"/>
        <div class="mt-4">
          <p class="text-2xl">{{ userFullName(user, true) }}</p>
          <p class="opacity-70">{{ firstLetterUpperCase(user.specialistType) }}</p>
        </div>
        <hr class="mb-2 mt-4"/>
        <div class="flex flex-col text-left gap-4 pt-2">
          <div class="flex flex-row">
            <p class="w-1/3">Email</p>
            <input v-if="isEditing" v-model="user.email" class="border-b-2 border-florijnOrange"/>
            <p v-else class="w-2/3 border-b-2 border-black/0">{{ user.email }}</p>
          </div>
          <div class="flex flex-row">
            <p class="w-1/3">Phone</p>
            <input v-if="isEditing" v-model="user.phone" class="border-b-2 border-florijnOrange"/>
            <p v-else class="w-2/3 border-b-2 border-black/0">{{ user.phone }}</p>
          </div>
          <div class="flex flex-row">
            <p class="w-1/3">Address</p>
            <input v-if="isEditing" v-model="user.address" class="border-b-2 border-florijnOrange"/>
            <p v-else class="w-2/3 border-b-2 border-black/0">{{ user.address }}</p>
          </div>
          <div class="flex flex-row">
            <p class="w-1/3">Zipcode</p>
            <input v-if="isEditing" v-model="user.zipCode" class="border-b-2 border-florijnOrange"/>
            <p v-else class="w-2/3 border-b-2 border-black/0">{{ user.zipCode }}</p>
          </div>
          <div class="flex flex-row">
            <p class="w-1/3">City</p>
            <input v-if="isEditing" v-model="user.city" class="border-b-2 border-florijnOrange"/>
            <p v-else class="w-2/3 border-b-2 border-black/0">{{ user.city }}</p>
          </div>
          <hr/>
          <div class="flex flex-row">
            <p class="w-1/3">Projects</p>
            <p class="w-2/3">{{ user.projects.length }}</p>
          </div>
        </div>
      </div>

      <div class="w-full xl:w-2/3 rounded-md shadow-md p-4">
        <div class="flex flex-row gap-4">
          <button :class="{'bg-blue-500': tabIndex === 0}" @click="this.setTabIndex(0)">Projects</button>
          <button :class="{'bg-blue-500': tabIndex === 1}" @click="this.setTabIndex(1)">Skills</button>
          <button :class="{'bg-blue-500': tabIndex === 2}" @click="this.setTabIndex(2)">Available Hours</button>
          <button :class="{'bg-blue-500': tabIndex === 3}" @click="this.setTabIndex(3)">Calendar</button>
        </div>
        <div>
          <div :class="[tabIndex === 0 ? '' : 'hidden']" class="h-full py-4">
            <div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-4">
              <ProjectCard v-for="(item, index) in user.projects" :key="index" :project="item" />
            </div>
          </div>
          <div :class="[tabIndex === 1 ? '' : 'hidden']" class="h-full py-4">
            <Skills :available-skills="availableSkills"  :user-skills="getSkills"/>
          </div>
          <div :class="[tabIndex === 2 ? '' : 'hidden']" class="h-full py-4">
            <AvailableHours :available-hours="getHours" @get-user-data="this.getUserData" @update-hours="this.saveUserHours"/>
          </div>
          <div :class="[tabIndex === 3 ? '' : 'hidden']" class="h-full py-4">
            <Calendar />
          </div>
        </div>
      </div>
    </div>
  </div>
</template>
<script>
import AvailableHours from '@/components/admin/profile/availableHours.vue';
import ProjectCard from '@/components/miscellaneous/ProjectCard.vue';
import Calendar from '@/components/admin/profile/calendar.vue';

import { firstLetterUpperCase, formatDate, userFullName } from '@/plugins/textManipulation';
import Skills from '@/components/admin/profile/skills.vue';

import axios from 'axios';
import { useToast } from "vue-toastification";
import LoadSpinner from "@/components/miscellaneous/LoadSpinner";
import availableHour from "@/models/availableHour";

export default {
  name: 'SpecialistProfile',
  inject: ['specialists', 'projects'],
  data() {
    return {
      isEditing: false,
      tabIndex: 0,
      user: null,
      availableSkills: null,
      toast: useToast(),
      notFound: false,
    }
  },
  created() {
    this.getUserData();
    this.getSkillsData();
  },
  methods: {
    firstLetterUpperCase,
    formatDate,
    userFullName,

    getUserData() {
      const id = this.$route.params.id;

      axios.get(`http://localhost:8080/api/users/${id}`)
        .then((res) => {
          this.user = res.data;
          this.notFound = false;
        })
        .catch((err) => {
          console.error(err);

          if (err.response.status === 404) {
            this.notFound = true;
          }

        })
    },

    getSkillsData() {
      axios.get(`http://localhost:8080/api/skills`)
        .then((res) => {
          this.availableSkills = res.data;
        })
        .catch((err) => {
          console.log(err);
        })
    },

    saveUserHours() {
      const requestBody = JSON.parse(JSON.stringify(this.user.hours))

      axios.post(`http://localhost:8080/api/users/specialist/${this.user.id}/hours`, requestBody)
        .then((res) => {
          this.user.hours = res.data;
          this.toast.success("Successfully updated \navailable hours");
        })
        .catch((err) => {
          console.error(err);
          this.toast.error("Something went wrong trying to update your availability")
        })
    },

    setTabIndex(index) {
      this.tabIndex = index;
    }
  },
  computed: {
    getProjects() {
      return this.user.projects;
    },
    getHours: {
      get() {
        return this.user.hours.days;
      },
      set(value) {
        this.user.hours.days = value;
      }
    },
    getSkills: {
      get() {
        return this.user.skills;
      },
      set(value) {
        this.user.skills = value;
      }
    },
    getUser() {
      return this.user;
    }
  },
  watch: {
    '$route.params.id': {
      handler: function(search) {
        console.log(search);
        this.getUserData();
      },
      deep: true,
      immediate: true
    }
  },
  components: {
    LoadSpinner,
    ProjectCard,
    Skills,
    AvailableHours,
    Calendar
  }
}
</script>

<style scoped>
  .profileImage {
    aspect-ratio: 4 / 3;
    object-fit: cover;
    width: 100%;
    object-position: top;
  }

  .wrapper {
    width: 100%;
    min-height: 100vh;
    background-color: #f8f8f8;
    margin: 0;
    padding: 20px;
  }
</style>